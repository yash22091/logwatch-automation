#!/bin/bash
# Author: Yash Patel

set -e

INSTALL_LOG="/var/log/logwatch_installer.log"
mkdir -p "$(dirname "$INSTALL_LOG")"
: > "$INSTALL_LOG"
chmod 600 "$INSTALL_LOG"

print_help() {
  echo "Usage: $0 [mode] [logwatch-options]"
  echo "Modes:"
  echo "  install                            Install and customize logwatch"
  echo "  run [logwatch-options]             Run logwatch with standard or custom options"
  echo "  daily-report [--auto-pdf]          Shortcut: Run daily HTML report to /tmp"
  echo "  weekly-report [--auto-pdf]         Shortcut: Run last 7 days report to /tmp"
  echo "  monthly-report [--auto-pdf]        Shortcut: Run last 30 days report to /tmp"
  echo "  help                               Show this help message"
  echo "Logwatch Options (when using 'run' mode):"
  echo "  --detail <level>                   Report detail level: High, Med, Low, or a number"
  echo "  --range <range>                    Date range: yesterday, today, all, or last N days"
  echo "  --service <name>                   Service to report on (e.g., sshd, cron)"
  echo "  --logfile <name>                   Specific logfile definition"
  echo "  --output <output type>             Output: stdout, mail, file"
  echo "  --format <format type>             Format: text, html"
  echo "  --filename <filename>              File to save report to (if output is file)"
  echo "  --mailto <address>                 Email the report to specified address"
  echo "Examples:"
  echo "  $0 install"
  echo "  $0 run --range yesterday --output file --format html --filename /tmp/logwatch.html"
  echo "  $0 run --detail High --service sshd --range today"
  echo "  $0 run --output mail --mailto security@example.com --detail High --range yesterday"
  echo "  $0 daily-report"
  echo
}

install_logwatch() {
  echo "[*] Detecting OS..."
  . /etc/os-release || { echo "[!] /etc/os-release missing"; exit 1; }
  DISTRO=$ID

  echo "[*] Installing Logwatch for $DISTRO..."
  case "$DISTRO" in
    ubuntu|debian)
      export DEBIAN_FRONTEND=noninteractive
      debconf-set-selections <<< "postfix postfix/main_mailer_type select No configuration" >>"$INSTALL_LOG" 2>&1
      apt-get update -qq >>"$INSTALL_LOG" 2>&1
      apt-get install -qq -y \
        -o Dpkg::Options::="--force-confdef" \
        -o Dpkg::Options::="--force-confold" \
        logwatch libjson-perl mailutils wkhtmltopdf \
        >>"$INSTALL_LOG" 2>&1
      unset DEBIAN_FRONTEND
      ;;
    rhel|centos|fedora|rocky|almalinux|amzn)
      yum install -y -q logwatch perl-JSON mailx wkhtmltopdf >>"$INSTALL_LOG" 2>&1
      ;;
    suse|opensuse*)
      zypper --non-interactive install logwatch perl-JSON mailx wkhtmltopdf >>"$INSTALL_LOG" 2>&1
      ;;
    alpine)
      apk add --no-cache logwatch perl perl-json mailx wkhtmltopdf >>"$INSTALL_LOG" 2>&1
      ;;
    *)
      echo "[!] Unsupported distro: $DISTRO"
      exit 1
      ;;
  esac

  patch_vdate
  customize_html

  echo "[✓] Logwatch installed & customized."
  echo "[*] Details logged to: $INSTALL_LOG"
}

patch_vdate() {
  echo "[*] Patching Logwatch for dynamic VDate..."
  LW="/usr/sbin/logwatch"
  if grep -q 'my \$VDate' "$LW"; then
    # 1) Insert POSIX import after the shebang
    sed -i "1a use POSIX qw(strftime);" "$LW"
    # 2) Insert dynamic VDate after 'use strict;'
    sed -i "/^use strict;/a my \$VDate = strftime(\"%Y-%m-%dT%H:%M:%SZ\", gmtime);" "$LW"
    # 3) Insert dynamic Version after the build-date comment
    sed -i "/# Specify version and build-date:/a my \$Version = '7.5.6';" "$LW"
    echo "[+] patch_vdate: OK" >>"$INSTALL_LOG" 2>&1
  else
    echo "[!] patch_vdate: marker not found" >>"$INSTALL_LOG" 2>&1
  fi
}

customize_html() {
  echo "[*] Updating HTML templates..."
  HTML_DIR="/usr/share/logwatch/default.conf/html"
  mkdir -p "$HTML_DIR"

  cat <<'EOF' >"$HTML_DIR/header.html"
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1.0"/>
  <title>System Security Summary – $VDate</title>
  <style>
    body { font-family: "Segoe UI", sans-serif; background: #f5f7fa; color:#333; margin:0 auto; padding:2rem; max-width:1200px; }
    h1   { font-size:2rem; border-bottom:3px solid #004080; padding-bottom:.5rem; margin-bottom:1rem; color:#004080; }
    p.intro { background:#e6f0ff; border-left:5px solid #007bff; padding:1rem; margin-bottom:2rem; }
  </style>
</head>
<body>
  <h1>System Security Summary Report</h1>
  <p class="intro">
    Daily overview of authentication logs, system activities, and potential threats — generated on <strong>$VDate</strong>.
  </p>
EOF

  cat <<'EOF' >"$HTML_DIR/footer.html"
<div style="margin-top:3rem;padding-top:2rem;border-top:1px solid #ddd;font-size:.9rem;color:#666;text-align:center;">
  <p>Report generated by internal monitoring system – <strong>Security Team | $VDate</strong></p>
  <p>All timestamps in UTC unless otherwise stated.</p>
  <p style="font-size:.8rem;">For assistance, contact your system administrator or the Security Team.</p>
</div>
</body>
</html>
EOF

  echo "[+] HTML templates updated." >>"$INSTALL_LOG" 2>&1
}

run_logwatch() {
  shift
  local args=("$@")
  local FILENAME=""
  local AUTO_PDF="false"
  local filtered_args=()

  for ((i = 0; i < ${#args[@]}; i++)); do
    case "${args[$i]}" in
      --auto-pdf)
        AUTO_PDF="true"
        ;;
      --filename)
        if [[ -n "${args[$i+1]}" ]]; then
          FILENAME="${args[$i+1]}"
          filtered_args+=("--filename" "$FILENAME")
          ((i++)) # skip next
        fi
        ;;
      *)
        filtered_args+=("${args[$i]}")
        ;;
    esac
  done

  echo "[*] Running Logwatch with args: ${filtered_args[*]}"
  mkdir -p "$(dirname "$FILENAME")" 2>/dev/null

  logwatch "${filtered_args[@]}"

  echo -e "\n[✓] Logwatch report has been generated."
  if [[ -n "$FILENAME" ]]; then
    echo "[✓] Output stored at: $FILENAME"
    prompt_pdf_conversion "$FILENAME" "$AUTO_PDF"
  else
    echo "[✓] Output displayed via: stdout or mail"
  fi
}

prompt_pdf_conversion() {
  local HTML_FILE="$1"
  local AUTO="$2"

  if [[ "$AUTO" == "true" ]]; then
    echo "[*] Auto PDF conversion enabled."
  else
    while true; do
      read -rp "Would you like to convert the report to PDF? (y/n): " choice
      case "$choice" in
        [Yy]) break ;;
        [Nn]) echo "[•] Skipped PDF generation."; return ;;
        *) echo "[!] Invalid input. Please enter 'y' or 'n'." ;;
      esac
    done
  fi

  if ! command -v wkhtmltopdf &> /dev/null; then
    echo "[!] 'wkhtmltopdf' is not installed. Installing..."
    if [[ -f /etc/debian_version ]]; then
      apt install -y wkhtmltopdf
    elif [[ -f /etc/redhat-release ]]; then
      yum install -y wkhtmltopdf
    fi
  fi

  local PDF_FILE="${HTML_FILE%.html}.pdf"
  wkhtmltopdf "$HTML_FILE" "$PDF_FILE"
  echo "[✓] PDF saved to $PDF_FILE"
}
# ---------------------------
# Main Execution Entry Point
# ---------------------------

if [[ $# -eq 0 ]]; then
  print_help
  exit 0
fi

case "$1" in
  install)
    install_logwatch
    ;;
  run)
    if [[ $# -eq 1 ]]; then
      echo "[!] Missing logwatch options after 'run'."
      exit 1
    fi
    run_logwatch "$@"
    ;;
  daily-report)
    echo "[*] Generating daily logwatch report..."
    FILE="/tmp/logwatch_daily_$(date +%F).html"
    mkdir -p "$(dirname "$FILE")"
    AUTO="false"
    [[ "$2" == "--auto-pdf" ]] && AUTO="true"
    logwatch --range today --detail High --output file --format html --filename "$FILE"
    echo "[+] Report saved to $FILE"
    prompt_pdf_conversion "$FILE" "$AUTO"
    ;;
  weekly-report)
    echo "[*] Generating weekly logwatch report..."
    FILE="/tmp/logwatch_weekly_$(date +%F).html"
    mkdir -p "$(dirname "$FILE")"
    AUTO="false"
    [[ "$2" == "--auto-pdf" ]] && AUTO="true"
    logwatch --range "between -7 days and -1 day" --detail High --output file --format html --filename "$FILE"
    echo "[+] Report saved to $FILE"
    prompt_pdf_conversion "$FILE" "$AUTO"
    ;;
  monthly-report)
    echo "[*] Generating monthly logwatch report..."
    FILE="/tmp/logwatch_monthly_$(date +%F).html"
    mkdir -p "$(dirname "$FILE")"
    AUTO="false"
    [[ "$2" == "--auto-pdf" ]] && AUTO="true"
    logwatch --range "between -30 days and -1 day" --detail High --output file --format html --filename "$FILE"
    echo "[+] Report saved to $FILE"
    prompt_pdf_conversion "$FILE" "$AUTO"
    ;;
  help|--help|-h)
    print_help
    ;;
  *)
    echo "[!] Unknown command: $1"
    print_help
    exit 1
    ;;
esac
